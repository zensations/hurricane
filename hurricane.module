<?php
/**
 * @file
 * Hurricane module implementation.
 */

/**
 * Implements hook_init().
 */
function hurricane_init() {
  $raphael = libraries_load('raphael');
  if (empty($raphael['loaded'])) {
    drupal_set_message(t('Raphaël library not found.'), 'error');
    return;
  }
  $renderers = hurricane_renderers();
  $font_face = '';
  foreach (array_keys(hurricane_renderers()) as $font) {
    $font_face .= '@font-face{font-family:\'' . $font . '\';src:local(Arial),local(Droid);}';
  }
  drupal_add_css($font_face, array('type' => 'inline'));
  drupal_add_js(array(
    'hurricane' => array(
      'map' => _hurricane_property_map(),
    ),
  ), array('type' => 'setting'));

  drupal_add_js(drupal_get_path('module', 'hurricane') . '/hurricane.js');

  global $theme;
  $enabled_renderers = theme_get_setting('hurricane_renderers', $theme);
  if ($enabled_renderers) {
    foreach ($renderers as $id => $info) {
      if (in_array($id, $enabled_renderers)) {
        drupal_add_js($info['file']);
      }
    }
  }
}

/**
 * Implements hook_libraries_info().
 */
function hurricane_libraries_info() {
  $libraries = array(
    'raphael' => array(
      'name' => 'Raphaël',
      'vendor url' => 'http://raphaeljs.com/',
      'download url' => 'http://raphaeljs.com/',
      'version arguments' => array(
        'file' => 'history.md',
        'pattern' => '/^([0-9a-zA-Z.-]+)\ /',
      ),
      'files' => array(
        'js' => array(
          'raphael.js' => array(
            'group' => JS_LIBRARY,
            'weight' => -100,
          ),
        ),
      ),
      'variants' => array(
        'minified' => array(
          'js' => array(
            'raphael-min.js',
          ),
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Available renderers.
 */
function hurricane_renderers() {
  $cache = cache_get('hurricane_renderers');
  if (empty($cache->data)) {
    $cache->data = module_invoke_all('hurricane_renderers');
    cache_set('hurricane_renderers', $cache->data);
  }
  return $cache->data;
}

/**
 * Implemenents hook_hurricane_renderers().
 */
function hurricane_hurricane_renderers() {
  return array(
    'drop' => array(
      'label' => t('Drop'),
      'file' => drupal_get_path('module', 'hurricane') . '/drop.js',
      'parameters' => array(
        'line-height' => array('label' => t('Size'), 'default' => 100),
        'color' => array('label' => t('Active'), 'default' => '#3182c5'),
        'background-color' => array('label' => t('Inactive'), 'default' => '#000000'),
        'font-weight' => array('label' => t('Opacity'), 'default' => 3),
        'word-spacing' => array('label' => t('Speed'), 'default' => 30),
      ),
    ),
  );
}

/**
 * Retrieve the map of available properties.
 */
function _hurricane_property_map() {
  return array(
    'line-height' => TRUE,
    'text-indent' => TRUE,
    'word-spacing' => TRUE,
    'letter-spacing' => TRUE,
    'font-size' => TRUE,
    'font-weight' => array(
      NULL,
      100,
      200,
      300,
      400,
      500,
      600,
      700,
      800,
      900,
    ),
    'font-family' => array_keys(hurricane_renderers()),
    'text-transform' => array(NULL, 'none', 'capitalize', 'uppercase'),
    'text-decoration' => array(
      NULL, 'none', 'underline', 'overline', 'line-through', 'blink',
    ),
    'text-align' => array(NULL, 'left', 'right', 'center', 'justify'),
    'white-space' => array(
      NULL, 'normal', 'pre', 'nowrap', 'pre-wrap', 'pre-line',
    ),
    'font-style' => array(NULL, 'normal', 'italic', 'oblique'),
    'color' => FALSE,
    'background-color' => FALSE,
  );
}


/**
 * Returns an associative array of default settings.
 *
 * @return array
 *   array of default settings
 */
function hurricane_default_settings() {
  return array(
    'font-family' => 'drop',
    'line-height' => 90,
    'text-indent' => 50,
    'word-spacing' => 30,
    'letter-spacing' => 50,
    'font-size' => 50,
    'font-weight' => 3,
    'text-transform' => 0,
    'text-decoration' => 0,
    'text-align' => 0,
    'white-space' => 0,
    'font-style' => 0,
    'color' => '#3182c5',
    'background-color' => '#000000',
  );
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function hurricane_form_system_theme_settings_alter(&$form, &$form_state) {
  $theme = FALSE;
  if (preg_match('/^theme_(.+)_settings$/', $form['var']['#value'], $matches)) {
    $theme = $matches[1];
  }
  $settings = theme_get_setting('hurricane_renderers', $theme);
  $collapsed = FALSE;
  if ($settings) {
    foreach ($settings as $set) {
      if ($set) {
        $collapsed = TRUE;
      }
    }
  }
  $form['hurricane'] = array(
    '#type' => 'fieldset',
    '#title' => t('Hurricane renderers'),
    '#description' => t('Enable specific renderers for this theme.'),
    '#collapsible' => $collapsed,
    '#collapsed' => $collapsed,
    'hurricane_renderers' => array(
      '#type' => 'checkboxes',
      '#default_value' => $settings ? $settings : array(),
    ),
  );
  $renderers = hurricane_renderers();
  foreach ($renderers as $id => $info) {
    $form['hurricane']['hurricane_renderers']['#options'][$id] = $info['label'];
  }
}
